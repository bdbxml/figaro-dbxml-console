<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="abort" xml:space="preserve">
    <value>aborts the current transaction</value>
  </data>
  <data name="addalias" xml:space="preserve">
    <value>adds an alias to the default container</value>
  </data>
  <data name="addindex" xml:space="preserve">
    <value>add an index to the default container</value>
  </data>
  <data name="close" xml:space="preserve">
    <value>close a container currently open by the shell.</value>
  </data>
  <data name="commit" xml:space="preserve">
    <value>commits the current transaction &amp; starts a new one</value>
  </data>
  <data name="compactcontainer" xml:space="preserve">
    <value>compact a container to shrink its size</value>
  </data>
  <data name="contextquery" xml:space="preserve">
    <value>execute a query expression against the last results returned</value>
  </data>
  <data name="cquery" xml:space="preserve">
    <value>execute a query expression against the default container</value>
  </data>
  <data name="createcontainer" xml:space="preserve">
    <value>creates a new container, which becomes the default</value>
  </data>
  <data name="delindex" xml:space="preserve">
    <value>delete an index from the default container</value>
  </data>
  <data name="echo" xml:space="preserve">
    <value>echo to output</value>
  </data>
  <data name="getdocuments" xml:space="preserve">
    <value>gets document(s) by name from the default container</value>
  </data>
  <data name="getmetadata" xml:space="preserve">
    <value>get metadata from the default document</value>
  </data>
  <data name="help" xml:space="preserve">
    <value>prints command help information</value>
  </data>
  <data name="info" xml:space="preserve">
    <value>get info on a default container</value>
  </data>
  <data name="listindexes" xml:space="preserve">
    <value>list all indexes in the default container</value>
  </data>
  <data name="lookupedgeindex" xml:space="preserve">
    <value>performs an edge index lookup in the default container</value>
  </data>
  <data name="lookupindex" xml:space="preserve">
    <value>performs an index lookup in the default container</value>
  </data>
  <data name="lookupstats" xml:space="preserve">
    <value>looks up index statistics on the default container</value>
  </data>
  <data name="opencontainer" xml:space="preserve">
    <value>opens a container and uses it as the default container</value>
  </data>
  <data name="preload" xml:space="preserve">
    <value>pre-loads (opens) a container</value>
  </data>
  <data name="prepare" xml:space="preserve">
    <value>prepare a query expression as the default pre-parsed query</value>
  </data>
  <data name="print" xml:space="preserve">
    <value>print most recent results, optionally to a file</value>
  </data>
  <data name="putdocument" xml:space="preserve">
    <value>insert a document into the default container</value>
  </data>
  <data name="putdocuments" xml:space="preserve">
    <value>insert documents from a directory into the current container</value>
  </data>
  <data name="query" xml:space="preserve">
    <value>execute the given expression or default pre-parsed query</value>
  </data>
  <data name="queryplan" xml:space="preserve">
    <value>prints the query plan for the given query expression</value>
  </data>
  <data name="reindexcontainer" xml:space="preserve">
    <value>re-index a container, optionally changing its index type</value>
  </data>
  <data name="removealias" xml:space="preserve">
    <value>remove an alias from the default container</value>
  </data>
  <data name="removecontainer" xml:space="preserve">
    <value>remove a container</value>
  </data>
  <data name="removedocument" xml:space="preserve">
    <value>remove a document from the default container</value>
  </data>
  <data name="run" xml:space="preserve">
    <value>run the given file as a dbxml script</value>
  </data>
  <data name="setautoindexing" xml:space="preserve">
    <value>set the auto-indexing state of the default container</value>
  </data>
  <data name="setbaseuri" xml:space="preserve">
    <value>sets the base URI in the default context</value>
  </data>
  <data name="setignore" xml:space="preserve">
    <value>tell the dbxml shell to ignore script errors</value>
  </data>
  <data name="setlazy" xml:space="preserve">
    <value>enables/disables lazy evaluation in the default context</value>
  </data>
  <data name="setmetadata" xml:space="preserve">
    <value>set a metadata item on the named document</value>
  </data>
  <data name="setnamespace" xml:space="preserve">
    <value>create a prefix-&gt;namespace binding in the default context</value>
  </data>
  <data name="setprojection" xml:space="preserve">
    <value>enables/disables document projection optimization</value>
  </data>
  <data name="setquerytimeout" xml:space="preserve">
    <value>set a query timeout in seconds in the default context</value>
  </data>
  <data name="settypedvariable" xml:space="preserve">
    <value>set a variable to the specified type in the default context</value>
  </data>
  <data name="setvariable" xml:space="preserve">
    <value>set a variable in the default context</value>
  </data>
  <data name="setverbose" xml:space="preserve">
    <value>set verbosity of the dbxml shell</value>
  </data>
  <data name="sync" xml:space="preserve">
    <value>sync current container to disk</value>
  </data>
  <data name="time" xml:space="preserve">
    <value>wrap a command in a timer</value>
  </data>
  <data name="transaction" xml:space="preserve">
    <value>create a transaction for all subsequent operations to use</value>
  </data>
  <data name="upgradecontainer" xml:space="preserve">
    <value>upgrade a container to the current BDB container format</value>
  </data>
</root>