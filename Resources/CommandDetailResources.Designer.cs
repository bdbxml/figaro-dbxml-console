//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Figaro.Utilities.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class CommandDetailResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CommandDetailResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Figaro.Utilities.Resources.CommandDetailResources", typeof(CommandDetailResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command is only available in Figaro Transactional Data Storage (TDS) edition..
        /// </summary>
        internal static string abort {
            get {
                return ResourceManager.GetString("abort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string addalias {
            get {
                return ResourceManager.GetString("addalias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the namespaceUri and name are not set, then this command adds to the default index.
        ///
        ///The index description must be in  [unique]-{path type}-{node type}-{key type}-{syntax type} format, where:
        ///
        ///unique: 
        ///	unique - specify explicitly if the index is for unique values.
        ///path type: 
        ///	node - index all instances where a node appears.
        ///	edge - index a specific node according to the specified path.
        ///node type:
        ///	element 	- an XML element
        ///	attribute 	- an XML attribute
        ///	metadata 	- XML document metadata
        ///k [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string addindex {
            get {
                return ResourceManager.GetString("addindex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ??????????????????????????????????????/.
        /// </summary>
        internal static string append {
            get {
                return ResourceManager.GetString("append", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Closes the container if the dbxml shell has it open..
        /// </summary>
        internal static string close {
            get {
                return ResourceManager.GetString("close", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string commit {
            get {
                return ResourceManager.GetString("commit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command takes a long time on large containers. Containers should be backed up first before running this command..
        /// </summary>
        internal static string compactcontainer {
            get {
                return ResourceManager.GetString("compactcontainer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command runs against the most recent results. An XmlQueryExpression object is created using the Prepare() command, and executes against the last resultset returned prior to the execution of this command..
        /// </summary>
        internal static string contextquery {
            get {
                return ResourceManager.GetString("contextquery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command is run against the default container using the Container.Query() method..
        /// </summary>
        internal static string cquery {
            get {
                return ResourceManager.GetString("cquery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a new default container; the old default is closed.
        ///The default is to create a node storage container with node indexes.
        ///A second argument of &quot;d&quot; creates a Wholedoc storage container, and
        ///&quot;id&quot; creates a document storage container with node indexes.
        ///A second argument of &quot;n&quot; creates a node storage container, and
        ///&quot;in&quot; creates a node storage container with node indexes.
        ///The optional third argument indicates whether or not to validate
        ///documents on insertion.
        ///A containerName of &quot;&quot; creates an in-me [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string createcontainer {
            get {
                return ResourceManager.GetString("createcontainer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the namespaceUri and name are not set, then this command
        ///deletes from the default index. This command uses the XmlContainer.DeleteIndex()
        ///and XmlContainer.DeleteDefaultIndex() commands..
        /// </summary>
        internal static string delindex {
            get {
                return ResourceManager.GetString("delindex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command echoes the specified text, followed by a new line..
        /// </summary>
        internal static string echo {
            get {
                return ResourceManager.GetString("echo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If docName is set, it is looked up in the default container.
        ///If no arguments are used, all documents in the container are
        ///looked up and placed in the results.
        ///The result document names and/or content can be displayed using
        ///the &apos;print&apos; command..
        /// </summary>
        internal static string getdocuments {
            get {
                return ResourceManager.GetString("getdocuments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get a metadata item or a list of named metadata items
        ///from the named document.  This method
        ///resets the default results to the returned value.
        ///This command, when used to get a specific item,
        ///is equivalent to the query expression:
        ///        for $i in doc(&apos;containerName/docName&apos;)
        ///        return dbxml:metadata(&apos;metaDataUri:metaDataName&apos;, $i).
        /// </summary>
        internal static string getmetadata {
            get {
                return ResourceManager.GetString("getmetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If no command is specified, then help prints a summary of the commands available..
        /// </summary>
        internal static string help {
            get {
                return ResourceManager.GetString("help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command returns information on the shell state and the default container. 
        ///If the &apos;preload&apos; command is used prior to this command, 
        ///information on pre-loaded containers, if any, will be 
        ///returned..
        /// </summary>
        internal static string info {
            get {
                return ResourceManager.GetString("info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command calls the Container.GetIndexSpecification()
        ///method and iterates over the indexes available..
        /// </summary>
        internal static string listindexes {
            get {
                return ResourceManager.GetString("listindexes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Valid operations are &apos;&lt;&apos;, &apos;&lt;=&apos;, &apos;&gt;&apos;, &apos;&gt;=&apos; and &apos;=&apos;, and the default
        ///operation is &apos;=&apos;. Indexes available can be found using the
        ///&apos;listIndexes&apos; command.
        ///
        ///Example -- look up elements called &quot;a&quot; with a parent called &quot;b&quot;
        ///on an edge presence index:
        ///
        ///        lookupEdgeIndex edge-element-presence &quot;&quot; a &quot;&quot; b
        ///
        ///Example -- look up elements called &quot;a&quot; with a parent called &quot;b&quot;
        ///and a value smaller than 5 on an edge equality decimal index:
        ///
        ///        lookupEdgeIndex edge-element-equality-decimal \
        ///            &quot;&quot; a  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string lookupedgeindex {
            get {
                return ResourceManager.GetString("lookupedgeindex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Valid operations are &apos;&lt;&apos;, &apos;&lt;=&apos;, &apos;&gt;&apos;, &apos;&gt;=&apos; and &apos;=&apos;, and the default
        ///operation is &apos;=&apos;. Indexes available can be found using the
        ///&apos;listIndexes&apos; command.
        ///
        ///Example -- look up all documents in document name index:
        ///
        ///        lookupIndex node-metadata-equality-string \
        ///            http://www.sleepycat.com/2002/dbxml name
        ///
        ///Example -- look up a specific document in document name index:
        ///
        ///        lookupIndex node-metadata-equality-string \
        ///            http://www.sleepycat.com/2002/dbxml name myDocument.
        /// </summary>
        internal static string lookupindex {
            get {
                return ResourceManager.GetString("lookupindex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Example -- lookup statistics  in document name index:
        ///        lookupStats node-metadata-equality-string \
        ///            http://www.sleepycat.com/2002/dbxml name
        ///Example -- lookup stats for a specific document in name index:
        ///        lookupStats node-metadata-equality-string \
        ///            http://www.sleepycat.com/2002/dbxml name &quot;&quot; &quot;&quot; myDocument
        ///The optional parent URI and name are used for edge indexes
        ///Indexes available can be found using the &apos;listIndexes&apos; command..
        /// </summary>
        internal static string lookupstats {
            get {
                return ResourceManager.GetString("lookupstats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string opencontainer {
            get {
                return ResourceManager.GetString("opencontainer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Opens the container and holds it in memory for 
        ///the duration of the shell&apos;s lifetime..
        /// </summary>
        internal static string preload {
            get {
                return ResourceManager.GetString("preload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string prepare {
            get {
                return ResourceManager.GetString("prepare", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If &quot;print&quot; is used, the most recent results are printed.
        ///If the &quot;printNames&quot; form is used, the results are turned
        ///into document names and printed, if possible.  If the results
        ///cannot be converted, the command will fail.  If the optional
        ///argument &quot;n&quot; is specified followed by a number, then only the
        ///specified number of results are printed. If the optional
        ///pathToFile parameter is specified, the output is written to
        ///the named file, rather than to stdout..
        /// </summary>
        internal static string print {
            get {
                return ResourceManager.GetString("print", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insert a new document in one of 3 ways:
        ///         By string content (the default, specify &quot;s&quot;)
        ///         By filename.  String is a file name, specify &quot;f&quot;
        ///         By XQuery.  String is an XQuery expression, specify &quot;q&quot;
        ///If adding by XQuery, a document is added for each result
        ///returned by the expression, and a unique name is generated.  
        ///If adding by string or file, a generated name isn&apos;t created,
        ///and the insertion will fail if the specified name is not unique
        ///within the default container..
        /// </summary>
        internal static string putdocument {
            get {
                return ResourceManager.GetString("putdocument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inserts documents from a directory into the current container. 
        ///The utility will scan the given directory for files using either 
        ///the default filter (*.xml) or the specified directory 
        ///filter. All documents found will be inserted into the container..
        /// </summary>
        internal static string putdocuments {
            get {
                return ResourceManager.GetString("putdocuments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Execute the given XQuery statement..
        /// </summary>
        internal static string query {
            get {
                return ResourceManager.GetString("query", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command parses the queryExpression into an
        ///XmlQueryExpression, and calls getQueryPlan().
        ///If the optional pathToFile paramter is specified
        ///the output is printed to the specified file..
        /// </summary>
        internal static string queryplan {
            get {
                return ResourceManager.GetString("queryplan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command uses the XmlManager.ReindexContainer() method
        ///to recreate the indexes on the container. It will also
        ///change the indexing type of the container, based on the
        ///second argument. &apos;n&apos; means node indexes and &apos;d&apos; means
        ///document level indexes.
        ///This command can take a long time on large containers.
        ///Containers must be closed, and should be backed up
        ///before running this command..
        /// </summary>
        internal static string reindexcontainer {
            get {
                return ResourceManager.GetString("reindexcontainer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string removealias {
            get {
                return ResourceManager.GetString("removealias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removes the named container.  The container must not be
        ///open, or the command will fail.  If the container is
        ///the current container or pre-loaded by the shell, 
        ///the current results and container are released 
        ///in order to perform the operation..
        /// </summary>
        internal static string removecontainer {
            get {
                return ResourceManager.GetString("removecontainer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string removedocument {
            get {
                return ResourceManager.GetString("removedocument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets the auto-indexing state to the specified value..
        /// </summary>
        internal static string setautoindexing {
            get {
                return ResourceManager.GetString("setautoindexing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The base URI must be of the form &apos;scheme:path&apos;.
        ///If there is no argument, the current base URI is used..
        /// </summary>
        internal static string setbaseuri {
            get {
                return ResourceManager.GetString("setbaseuri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When set on, errors from commands in dbxml shell
        ///scripts will be ignored.  When off, they will cause
        ///termination of the script.  Default is off..
        /// </summary>
        internal static string setignore {
            get {
                return ResourceManager.GetString("setignore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets the evaluation type on the QueryContext used by the shell..
        /// </summary>
        internal static string setlazy {
            get {
                return ResourceManager.GetString("setlazy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set a metaData item for the named document from the string value.
        ///Example: setMetaData myDoc  myMD 100.
        /// </summary>
        internal static string setmetadata {
            get {
                return ResourceManager.GetString("setmetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string setnamespace {
            get {
                return ResourceManager.GetString("setnamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string setprojection {
            get {
                return ResourceManager.GetString("setprojection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string setquerytimeout {
            get {
                return ResourceManager.GetString("setquerytimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use this command to create or set the values of untyped variables..
        /// </summary>
        internal static string setvariable {
            get {
                return ResourceManager.GetString("setvariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Level is used to set the verbosity output of the 
        ///XML database library itself. Output will be sent 
        ///to the console.
        ///Using 0 0 turns vebosity off.  Values of -1 -1 turn on
        ///maximum verbosity.  The values are masks, from enumerations
        ///in the library, and can be combined.  For example, to
        ///turn on INDEXER and optimizer messages, use a category of 0x03.
        ///Output for XQuery&apos;s fn:trace() function is enabled using LEVEL_INFO and CATEGORY
        ///_QUERY.
        ///Numbers can be decimal or hex.  Non-zero level values are:
        ///      [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string setverbose {
            get {
                return ResourceManager.GetString("setverbose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command syncs the current container to disk..
        /// </summary>
        internal static string sync {
            get {
                return ResourceManager.GetString("sync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command wraps a timer around the specified command
        ///and times its execution..
        /// </summary>
        internal static string time {
            get {
                return ResourceManager.GetString("time", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any transaction already in force is committed..
        /// </summary>
        internal static string transaction {
            get {
                return ResourceManager.GetString("transaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Upgrades containers to the latest Berkeley DB container 
        ///specifications. This operation can take a long time on longer 
        ///containers. Containers should be backed up before performing 
        ///this method..
        /// </summary>
        internal static string upgradecontainer {
            get {
                return ResourceManager.GetString("upgradecontainer", resourceCulture);
            }
        }
    }
}
